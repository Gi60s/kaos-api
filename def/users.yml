openapi: 3.0.2
info:
  title: K.A.O.S. Users API
  version: v1
paths:
  /users:
    get:
      tags:
        - Users
      summary: List users
      parameters:
        - $ref: './common.yml#/parameters/EffectiveDate'
        - $ref: './common.yml#/parameters/EffectiveDateRange'
        - $ref: '#/components/parameters/Fieldsets'
        - name: 'userId'
          in: query
          description: Filter results to the specific user ids.
          explode: false
          schema:
            type: array
            items:
              type: string
        - $ref: './common.yml#/parameters/Accessibility'
        - $ref: './common.yml#/parameters/FreshnessScore'
        - $ref: './common.yml#/parameters/QualityScore'
        - $ref: './common.yml#/parameters/ContentQualityScore'
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Unauthroized
        403:
          description: Forbidden
        500:
          description: Internal server error
    post:
      tags:
        - Users
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - captchaToken
                - email
                - displayName
                - password
              properties:
                captchaToken:
                  type: string
                displayName:
                  $ref: '#/components/schemas/UserBasic/properties/displayName'
                email:
                  $ref: '#/components/schemas/UserPersonal/properties/email'
                password:
                  type: string
      responses:
        201:
          description: New user created.
          headers:
            location:
              description: The URL to GET the resource from.
              schema:
                type: string
                default: '{domain}/users/{userId}'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasic'
        400:
          description: Bad request
        500:
          description: Internal server error
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags:
        - Users
      summary: Get user
      parameters:
        - $ref: './common.yml#/parameters/EffectiveDate'
        - $ref: '#/components/parameters/Fieldsets'
      responses:
        200:
          description: User retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - Users
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBasic'
      responses:
        200:
          description: User basic data updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasic'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - Users
      summary: Delete user
      description: This will delete all information associated with a user.
      responses:
        204:
          description: Deleted
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
  /users/{userId}/personal:
    parameters:
      - $ref: '#/components/parameters/UserId'
    put:
      tags:
        - Users
      summary: Update personal
      description: Update a users personal information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonal'
      responses:
        200:
          description: User personal data updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPersonal'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
components:
  parameters:
    Fieldsets:
      name: fieldsets
      description: The fieldsets to limit results to.
      in: query
      schema:
        type: array
        default: ['basic']
        items:
          type: string
          enum:
            - basic
            - micro
            - personal
            - units
    UserId:
      name: userId
      in: path
      required: true
      schema:
        $ref: './common.yml#/schemas/Uid'
  schemas:
    User:
      type: object
      properties:
        basic:
          $ref: '#/components/schemas/UserBasic'
        personal:
          $ref: '#/components/schemas/UserPersonal'
        micro:
          $ref: '#/components/schemas/UserMicro'
        units:
          $ref: '#/components/schemas/UserUnits'
    UserBasic:
      type: object
      required:
        - displayName
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        accessibility:
          $ref: 'common.yml#/schemas/Accessibility'
        avatar:
          $ref: 'common.yml#/schemas/Image'
        contentQualityScore:
          $ref: './common.yml#/schemas/SocialScore'
        displayName:
          description: The publicly displayed name for this user.
          type: string
        effectiveDate:
          $ref: './common.yml#/schemas/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/schemas/EffectiveDateRanges'
        freshnessScore:
          $ref: './common.yml#/schemas/SocialScore'
        longDescription:
          description: A longer description that a user can add for themself.
          type: string
        networks:
          description: The networks that the user currently has an account with.
          type: array
          readOnly: true
          items:
            type: string
        qualityScore:
          $ref: './common.yml#/schemas/SocialScore'
        shortDescription:
          description: A short description that a user can add for themself.
          type: string
          maxLength: 500
        vanityUrlPath:
          description: The URL to the user's own page within the networks.
          type: string
        website:
          description: A URL to the user's own external website.
          type: string
    UserMicro:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/UserBasic/properties/uid'
        avatar:
          $ref: '#/components/schemas/UserBasic/properties/avatar'
        displayName:
          $ref: '#/components/schemas/UserBasic/properties/displayName'
    UserPersonal:
      type: object
      description: Personal fieldset data
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        accessibility:
          $ref: './common.yml#/schemas/Accessibility'
        birthdate:
          type: string
          format: date
        birthdateVerified:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        nameVerified:
          type: boolean
        email:
          type: string
          format: email
        emailVerified:
          type: boolean
        location:
          $ref: './locations.yml#/components/schemas/LocationBasic'
        locationVerified:
          type: boolean
    UserUnits:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: './units.yml#/components/schemas/AuthorizationAttribute'
        effectiveDate:
          $ref: './common.yml#/schemas/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/schemas/EffectiveDateRanges'
        unit:
          type: object
          description: The unit that granted this membership and attributes attribute.
          properties:
            uid:
              $ref: './common.yml#/schemas/UidRead'
            name:
              type: string
            unitType:
              $ref: './units.yml#/components/schemas/UnitBasic/properties/type'