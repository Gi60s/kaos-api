openapi: '3.0.2'
info:
  title: K.A.O.S. Locations API
  version: '1.0'
paths:
  /locations:
    get:
      tags:
        - Locations
      summary: List locations
      description: Get a list of all locations. The users and units returned in the results will be limited to the access you have.
      parameters:
        - $ref: '#/components/parameters/queryFieldSet'
        - name: unitType
          in: query
          description: The unit types to limit results to.
          schema:
            type: array
            items:
              $ref: './units.yml#/components/schemas/UnitBasic/properties/type'
        - name: area
          in: query
          description: The area to limit results to.
          style: deepObject
          schema:
            type: object
            properties:
              northLatitude:
                $ref: '#/components/schemas/Latitude'
              eastLongitude:
                $ref: '#/components/schemas/Longitude'
              southLatitude:
                $ref: '#/components/schemas/Latitude'
              westLongitude:
                $ref: '#/components/schemas/Longitude'
        - name: country
          in: query
          description: The country to limit results to.
          schema:
            type: string
        - name: postalCode
          in: query
          description: The postal code to limit results to.
          schema:
            type: string
        - name: province
          in: query
          description: The province to limit results to.
          schema:
            type: string
      responses:
        200:
          description: All locations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
  /locations/{locationId}:
    parameters:
      - $ref: '#/components/parameters/locationId'
    get:
      tags:
        - Locations
      summary: Get a location
      description: Get a specific location. The users and units returned in the results will be limited to the access you have.
      parameters:
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: A single location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
      x-code-samples:
        - lang: JavaScript
          label: NodeJS
          source: |
            const axios = require('axios').default
            axios.get('/locations/1234')
              .then(res => {
                console.log(res.data)
              })
              .catch(err => {
                console.error(err.stack)
              })
        - lang: JavaScript
          source: |
            fetch('/locations/1234')
              .then(res => res.json())
              .then(body => {
                console.log(body)
              })
              .catch(err => {
                console.error(err.stack)
              })
components:
  parameters:
    locationId:
      name: locationId
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - units
            - users
  schemas:
    Location:
      type: object
      properties:
        basic:
          $ref: '#/components/schemas/LocationBasic'
        units:
          type: array
          items:
            $ref: '#/components/schemas/LocationUnits'
        users:
          type: array
          items:
            $ref: '#/components/schemas/LocationUsers'
    LocationBasic:
      type: object
      required:
      - locationId
      - latitude
      - longitude
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        addressLine1:
          type: string
          example: 1234 Mountain St
        addressLine2:
          type: string
        addressLine4:
          type: string
        addressLine5:
          type: string
        country:
          type: string
          description: The name of the country.
        latitude:
          $ref: '#/components/schemas/Latitude'
        locality:
          type: string
          description: The name of the city or town.
        longitude:
          $ref: '#/components/schemas/Longitude'
        postalCode:
          type: string
        province:
          type: string
          description: The name of the province or state.
    LocationUnits:
      type: object
      # properties:
      #   uid:
      #     $ref: './units.yml#/components/schemas/UnitBasic/properties/uid'
      #   name:
      #     $ref: './units.yml#/components/schemas/UnitBasic/properties/name'
      #   shortDescription:
      #     $ref: './units.yml#/components/schemas/UnitBasic/properties/shortDescription'
      #   logo:
      #     $ref: './units.yml#/components/schemas/UnitBasic/properties/logo'
    LocationUsers:
      type: object
      properties:
        uid:
          $ref: './users.yml#/components/schemas/UserBasic/properties/uid'
        displayName:
          $ref: './users.yml#/components/schemas/UserBasic/properties/displayName'
        avatar:
          $ref: './users.yml#/components/schemas/UserBasic/properties/avatar'
        firstName:
          $ref: './users.yml#/components/schemas/UserPersonal/properties/firstName'
        lastName:
          $ref: './users.yml#/components/schemas/UserPersonal/properties/lastName'
    Latitude:
      type: number
      minimum: -90
      maximum: 90
    Longitude:
      type: number
      minimum: -180
      maximum: 180
    LongLat:
      type: object
      required:
      - latitude
      - longitude
      properties:
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'