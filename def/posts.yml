openapi: '3.0.2'
info:
  title: K.A.O.S. Posts API
  version: 'v1'
paths:
  /posts:
    post:
      tags:
        - Posts
      summary: Broadcast
      description: |
        TODO: maybe a broadcast is a parent of a post so that the broadcast can have analytics of all of the post copies. A broadcast cannot be represented by a single post because posts within channels will have their own set of comments and with a single post the comments will appear cross channel.

        Send a post to mutliple channels within one or more units.
      parameters:
        - $ref: '#/components/parameters/Fieldsets'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostBasic'
      responses:
        201:
          description: Broadcast successful
          headers:
            location:
              schema:
                type: string
                default: '{baseUrl}/posts/{postId}'
  /posts/{postId}:
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      tags:
        - Posts
      summary: Get a post
      description: Get a specific post.
      parameters:
        - $ref: '#/components/parameters/Fieldsets'
      responses:
        200:
          description: Post retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - Posts
      summary: Update a post
      description: Update a specific post.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostBasic'
      responses:
        200:
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Delete a specific post.
      responses:
        204:
          description: Post deleted
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
  /posts/{postId}/comments:
    parameters:
      - $ref: '#/components/parameters/PostId'
    post:
      tags:
        - Comments
      summary: Comment on post
      description: Comment on a specific post.
      responses:
        200:
          description: Commented successfully on post
          headers:
            location:
              schema:
                type: string
                default: '{baseUrl}/comments/{commentId}'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
components:
  parameters:
    CommentId:
      in: path
      name: commentId
      required: true
      description: The unique comment ID.
      schema:
        type: string
    Fieldsets:
      in: query
      name: fieldsets
      schema:
        type: array
        default: ['basic']
        items:
          type: string
          enum:
            - analytics
            - basic
            - comments
            - parent
    PostId:
      in: path
      name: postId
      required: true
      description: The unique post ID.
      schema:
        type: string
  schemas:
    Post:
      type: object
      properties:
        analytics:
          $ref: '#/components/schemas/PostAnalytics'
        basic:
          $ref: '#/components/schemas/PostBasic'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentPost'
        parent:
          allOf:
            - $ref: '#/components/schemas/PostBasic'
            - type: object
              nullable: true
    PostAnalytics:
      type: object
      properties:
        distributionCount:
          type: integer
          readOnly: true
        mentions:
          type: array
          items:
            oneOf:
              - $ref: './users.yml#/components/schemas/UserMicro'
              - $ref: './units.yml#/components/schemas/UnitMicro'
          readOnly: true
        sharesCount:
          type: integer
          readOnly: true
    PostBasic:
      oneOf:
        - $ref: '#/components/schemas/GeneralPost'
        - $ref: '#/components/schemas/CommentPost'
        - $ref: '#/components/schemas/MarketplacePost'
      discriminator:
        propertyName: postType
        mapping:
          post: '#/components/schemas/GeneralPost'
          comment: '#/components/schemas/CommentPost'
          marketplace: '#/components/schemas/MarketplacePost'
    PostCore:
      type: object
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        body:
          type: string
          description: Rich text representation of the message.
        bodyPlain:
          type: string
          description: Plain text representation of the message.
          readOnly: true
        deleted:
          type: boolean
          description: Whether this post has been deleted.
          readOnly: true
        # media:
        #   type: array
        #   maxItems: 6
        #   items:
        #     oneOf:
        #       - $ref: './common.yml#/schemas/Image'
        #       - $ref: './common.yml#/schemas/Video'
        #     discriminator:
        #       propertyName: mediaType
        #       mapping:
        #         image: './common.yml#/schemas/Image'
        #         video: './common.yml#/schemas/Video'
        reactions:
          $ref: './common.yml#/schemas/Reactions'
        hashTags:
          type: array
          items:
            type: string
          readOnly: true
        user:
          readOnly: true
          allOf:
            - type: object
              description: The user who made the post.
            - $ref: './users.yml#/components/schemas/UserMicro'
        userId:
          $ref: './users.yml#/components/schemas/UserMicro/properties/uid'
        effectiveDate:
          $ref: './common.yml#/schemas/EffectiveDate'
        effectiveDateRange:
          $ref: './common.yml#/schemas/EffectiveDateRanges'
    CommentPost:
      allOf:
        - $ref: '#/components/schemas/PostCore'
        - type: object
          properties:
            post:
              type: string
              description: The ID of the post that this comment is attached to.
            postType:
              type: string
              enum:
                - comment
            # reactions:
            #   $ref: './common.yml#/Reactions'
    GeneralPost:
      allOf:
        - $ref: '#/components/schemas/PostCore'
        - type: object
          properties:
            allowComments:
              type: boolean
              description: If `false` then future comments are disabled and current comments are hidden.
            channels:
              type: array
              description: The channel ID's that the post was made to.
              items:
                type: string
                # $ref: './common.yml#/Uid2Write'
            pinned:
              type: boolean
              default: false
            postType:
              type: string
              enum:
                - post
            title:
              type: string
    MarketplacePost:
      allOf:
        - $ref: '#/components/schemas/GeneralPost'
        - type: object
          properties:
            brand:
              type: string
            postType:
              type: string
              enum:
                - marketplace
            price:
              type: number
              minimum: 0
            tags:
              type: array
              description: Categorization information, such as make and model of an item.
              items:
                type: string