openapi: '3.0.2'
info:
  title: 'K.A.O.S. Units API'
  version: '1.0'
paths:
  /units:
    get:
      tags:
        - Units
      summary: List units
      parameters:
        - $ref: './common.yml#/parameters/Accessibility'
        - $ref: './common.yml#/parameters/EffectiveDate'
        - $ref: './common.yml#/parameters/EffectiveDateRange'
        - $ref: './common.yml#/parameters/FreshnessScore'
        - $ref: './common.yml#/parameters/QualityScore'
        - $ref: './common.yml#/parameters/ContentQualityScore'
        - $ref: '#/components/parameters/queryFieldSet'
        - name: activityScore
          description: Score based on the frequency that a unit accesses the network.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/schemas/SocialScoreRange'
        - name: networks
          description: The networks to limit returned units to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: uid
          description: A comma seperated list of unit ids to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: unitType
          description: A comma seperated list of unit types to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UnitBasic/properties/type'
      responses:
        200:
          description: A list of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
    post:
      tags:
        - Units
      summary: Create unit
      requestBody:
        $ref: '#/components/requestBodies/UnitBasic'
      responses:
        201:
          description: Unit created
          headers:
            location:
              description: The URL to GET the resource from.
              schema:
                type: string
                default: '{domain}/units/{unitId}'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitBasic'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
  /units/{unitId}:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units
      summary: Get unit
      parameters:
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: Unit retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - Units
      summary: Update unit
      parameters:
        - $ref: '#/components/parameters/queryFieldSet'
      requestBody:
        $ref: '#/components/requestBodies/UnitBasic'
      responses:
        200:
          description: Unit updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - Units
      summary: Delete unit
      responses:
        204:
          description: Unit deleted
  /units/{unitId}/banner:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units Banner
      summary: Get the banner
      responses:
        200:
          description: Banner retrieved.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - Units Banner
      summary: Set the banner
      requestBody:
        $ref: '#/components/requestBodies/Image'
      responses:
        200:
          description: Banner successfully set.
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
  /units/{unitId}/logo:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units Logo
      summary: Get the logo
      responses:
        200:
          description: Logo retrieved.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    put:
      tags:
        - Units Logo
      summary: Set the logo
      requestBody:
        $ref: '#/components/requestBodies/Image'
      responses:
        200:
          description: Logo successfully set.
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
  /units/{unitId}/hierarchy/{childUnitId}:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - name: childUnitId
        description: The id of the unit that should be the child unit.
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Unit Hierarchy
      summary: Assign hierarchy
      responses:
        200:
          description: Logo successfully set.
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - Unit Hierarchy
      summary: Remove hierarchy
      responses:
        200:
          description: Logo successfully set.
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error

components:
  parameters:
    pathUnitId:
      name: 'unitId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - activityFeed
            - channels
            - members
            - units
  requestBodies:
    UnitBasic:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/UnitTypeRetailer'
              - $ref: '#/components/schemas/UnitTypeTeam'
              - $ref: '#/components/schemas/UnitTypeVenue'
            discriminator:
              propertyName: type
              mapping:
                retailer: '#/components/schemas/UnitTypeRetailer'
                team: '#/components/schemas/UnitTypeTeam'
                venue: '#/components/schemas/UnitTypeVenue'
    Image:
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
  schemas:
    AuthorizationAttribute:
      type: string
      enum:
        - contributer
        - channel manager
        - event manager
        - moderator
        - user manager
    AuthorizationAttributes:
      type: array
      description: "Authorization attributes may be one of the following values:

        - **channel creator** - Can create channels and edit or delete own channels.

        - **channel manager** - Can create, edit, and delete channels. Can set channel membership for any channel.
          Not a member of every channel nor authorized to do anything within a channel unless given additional
          authorization attributes within that channel, which the manager can give to themselves.

        - **event manager** - Coming soon

        - **moderator** - Can make posts as well as edit or delete any posts.

        - **user manager** - Can add or remove users and set authorization attributes to other users.
        "
      items:
        $ref: '#/components/schemas/AuthorizationAttribute'
    Unit:
      type: object
      properties:
        basic:
          oneOf:
            - $ref: '#/components/schemas/UnitTypeRetailer'
            - $ref: '#/components/schemas/UnitTypeTeam'
            - $ref: '#/components/schemas/UnitTypeVenue'
          discriminator:
            propertyName: type
            mapping:
              retailer: '#/components/schemas/UnitTypeRetailer'
              team: '#/components/schemas/UnitTypeTeam'
              venue: '#/components/schemas/UnitTypeVenue'
        hierarchy:
          $ref: '#/components/schemas/UnitHierarchy'
        networks:
          description: Array of network ID's for the networks this unit is a part of.
          type: array
          items:
            type: string
    UnitBasic:
      type: object
      required:
        - name
        - location
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        accessibility:
          $ref: './common.yml#/schemas/Accessibility'
        activityScore:
          $ref: './common.yml#/schemas/SocialScore'
        banner:
          $ref: './common.yml#/schemas/Image'
        contentQualityScore:
          $ref: './common.yml#/schemas/SocialScore'
        email:
          type: string
        effectiveDate:
          $ref: './common.yml#/schemas/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/schemas/EffectiveDateRanges'
        freshnessScore:
          $ref: './common.yml#/schemas/SocialScore'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        logo:
          $ref: './common.yml#/schemas/Image'
        longDescription:
          type: string
        name:
          type: string
        phoneNumber:
          $ref: './common.yml#/schemas/PhoneNumber'
        qualityScore:
          $ref: './common.yml#/schemas/SocialScore'
        shortDescription:
          type: string
          maxLength: 500
        type:
          type: string
          description: The unit type.
          enum:
            - retailer
            - team
            - venue
        vanityUrlPath:
          type: string
        welcomeMessage:
          type: string
        website:
          type: string
    UnitHierarchy:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/UnitMicro'
        parent:
          $ref: '#/components/schemas/UnitMicro'
    UnitMicro:
      type: object
      description: The parent unit.
      nullable: true
      properties:
        uid:
          $ref: './common.yml#/schemas/UidRead'
        name:
          type: string
          readOnly: true
        url:
          type: string
          description: The URL to the parent unit's page.
    UnitTypeRetailer:
      allOf:
        - $ref: '#/components/schemas/UnitBasic'
        - type: object
          required:
            - type
          properties:
            hasOnlineStore:
              type: boolean
            hasPhysicalStore:
              type: boolean
            type:
              type: string
              enum:
                - retailer
    UnitTypeTeam:
      allOf:
        - $ref: '#/components/schemas/UnitBasic'
        - type: object
          required:
            - type
          properties:
            networks:
              type: array
              items:
                type: string
            recruiting:
              type: boolean
            recruitingMessage:
              type: string
            recruitingMinimumAge:
              type: integer
              minimum: 0
            upcomingEvents:
              $ref: './events.yml#/components/schemas/UpcomingEvents'
            type:
              type: string
              enum:
                - team
    UnitTypeVenue:
      allOf:
        - $ref: '#/components/schemas/UnitBasic'
        - type: object
          required:
            - type
          properties:
            hoursOfOperation:
              $ref: './common.yml#/schemas/HoursOfOperationWeek'
            location:
              $ref: './locations.yml#/components/schemas/Location'
            networks:
              type: array
              items:
                type: string
            rules:
              type: string
            types:
              description: Network specific venue types.
              type: array
              items:
                type: string
            upcomingEvents:
              $ref: './events.yml#/components/schemas/UpcomingEvents'
            type:
              type: string
              enum:
                - venue