paths:
  users:
    get:
      tags:
        - User
      description: Get a list of users
      parameters:
        - name: accessibility
          in: query
          schema:
            type: string
        - name: freshnessScore
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              minimum:
                type: integer
              maximum:
                type: integer
        - name: qualityScore
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              minimum:
                type: integer
              maximum:
                type: integer
        - name: contentQualityScore
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              minimum:
                type: integer
              maximum:
                type: integer
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Unit created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  user:
    parameters:
      - name: 'userId'
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      description: Get a single user and its details
      responses:
        200:
          description: Retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - User
      description: Update a single user's details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    delete:
      tags:
        - User
      description: Delete a user
      responses:
        204:
          description: User deleted
components:
  schemas:
    Credentials:
      type: object
      required:
        - uid
        - email
        - password
      properties:
        uid:
          description: Unique identifier (UUID v4)
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      required:
        - displayName
        - location
      properties:
        uid:
          description: Unique identifier (UUID v4)
          type: string
        birthdate:
          type: string
          format: date
        identifyVerified:
          type: boolean
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        location:
          $ref: './locations.yml#/components/schemas/Location'
        networks:
          type: array
          items:
            type: string
        longDescription:
          type: string
        shortDescription:
          type: string
          maxLength: 500
        avatar:
          type: object
          properties:
            url:
              type: string
        accessibility:
          type: string
          enum:
            - public
            - private
        vanityUrlPath:
          type: string
        website:
          type: string
        freshnessScore:
          type: integer
          minimum: 1
          maximum: 100
        qualityScore:
          type: integer
          minimum: 1
          maximum: 100
        contentQualityScore:
          type: integer
          minimum: 1
          maximum: 100


