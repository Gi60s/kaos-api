paths:
  units:
    get:
      tags:
        - Units
      description: Get a list of units
      parameters:
        - $ref: './common.yml#/parameterQueryAccessibility'
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFieldSet'
        - name: networks
          description: The networks to limit returned units to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: freshnessScore
          description: Filter on freshness score range.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: qualityScore
          description: Score based on how setup a unit is.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: contentQualityScore
          description: Score based on the quality of the content created by the unit (articles, posts, comments, etc).
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: activityScore
          description: Score based on the frequency that a unit accesses the network.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: uid
          description: A comma seperated list of unit ids to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: unitType
          description: A comma seperated list of unit types to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                $ref: '#/components/schemas/UnitTypeEnumValues'
      responses:
        200:
          description: A list of units
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    post:
      tags:
        - Units
      summary: Create a new unit
      description: Create a new unit of a specified type
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: Unit created
          headers:
            Location:
              description: The API endpoint to hit to get the created unit.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  basic:
                    $ref: '#/components/schemas/UnitBasic'
                  meta:
                    $ref: '#/components/schemas/UnitMeta'
  unit:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units
      summary: Get a unit
      description: Get a single unit and its details
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: Retrieved unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    put:
      tags:
        - Units
      summary: Update a unit
      description: Update a single unit's basic info
      parameters:
        - $ref: '#/components/parameters/queryFieldSet'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: Unit updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    patch:
      tags:
        - Units
      summary: Partial update a unit
      description: Update parts of a single unit's basic info
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFieldSet'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        204:
          description: Updated
    delete:
      tags:
        - Units
      summary: Delete a unit
      description: Delete all data about a unit and its sub units for all effective dates.
      responses:
        204:
          description: Unit deleted
  unitActivityFeed:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Unit Activity Feed
      summary: Get activity feed
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: './communications.yml#/components/parameters/queryPostType'
        - $ref: './common.yml#/parameterQueryBeforeDate'
        - name: includePins
          description: Whether to include pins object in the result.
          in: query
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: A list of posts made to the feed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitActivityFeed'
  unitChannels:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Unit Channels
      summary: Get a list of channels
      responses:
        200:
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './communications.yml#/components/schemas/ChannelBasic'
  unitChannelsUser:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - $ref: '#/components/parameters/pathUserId'
    get:
      tags:
        - Unit Channels
      summary: Get a list of user's channels
      description: Get a list of channels that this user is a member of.
      responses:
        200:
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './communications.yml#/components/schemas/ChannelBasic'
  unitMembers:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Unit Members
      summary: Get members
      description: Get all unit members.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFilterUserId'
        - $ref: './users.yml#/components/parameters/queryFreshnessScore'
        - $ref: './users.yml#/components/parameters/queryQualityScore'
        - $ref: './users.yml#/components/parameters/queryContentQualityScore'
        - name: includeInherited
          description: Whether to include inherited members.
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: A list of unit members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitMembers'
    put:
      tags:
        - Unit Members
      summary: Batch assign attributes
      description: Attach one or more members to a unit with the specified attributes. If a member is attached without attributes then they will have basic read access.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/putMembersAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitMembers'
    patch:
      tags:
        - Unit Members
      summary: Batch partial assign attributes
      description: Partial update some attributes for one or more members.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/patchMembersAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitMembers'
    delete:
      tags:
        - Unit Members
      summary: Batch remove members
      description: Remove one or more members from the unit.
      parameters:
        - $ref: '#/components/parameters/queryFilterUserId'
      responses:
        204:
          description: Members removed
  unitMember:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - $ref: '#/components/parameters/pathUserId'
    put:
      tags:
        - Unit Members
      summary: Assign a member attributes
      description: Attach a members to a unit with the specified attributes. If a member is attached without attributes then they will have basic read access.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/requestBodies/putMemberAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitMembers'
    patch:
      tags:
        - Unit Members
      summary: Partial assign a member attributes
      description: Update some attributes for existing members or potentially add a member with set attributes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/patchMemberAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitMembers'
    delete:
      tags:
        - Unit Members
      summary: Remove a member
      description: Remove a members from the unit.
      responses:
        204:
          description: Members removed
  subUnits:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - name: subUnitId
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Link sub unit
      description: Set a unit as a sub unit to a parent unit. A unit cannot be a sub unit to two different parent units. Placing a unit as a sub unit of a parent when the sub unit already has a parent will unlink the previous parent and link to the new parent.
      tags:
        - Sub Units
      responses:
        200:
          description: Sub unit linked
    delete:
      summary: Unlink sub unit
      description: Unlink a sub unit from a parent unit.
      tags:
        - Sub Units
      responses:
        200:
          description: Sub unit unlinked
components:
  parameters:
    pathUnitId:
      name: 'unitId'
      in: path
      required: true
      schema:
        type: string
    pathUserId:
      name: 'userId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - activityFeed
            - channels
            - members
            - units
    queryFilterUserId:
      name: userId
      in: query
      style: form
      explode: false
      description: Comma separated list of user IDs to filter results to.
      schema:
        type: array
        items:
          $ref: './common.yml#/Uid2'
  requestBodies:
    patchMemberAttributes:
      type: object
      properties:
        set:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationAttribute'
        remove:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationAttribute'
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
    patchMembersAttributes:
      type: array
      items:
        type: object
        properties:
          set:
            $ref: '#/components/schemas/AuthorizationAttributes'
          remove:
            $ref: '#/components/schemas/AuthorizationAttributes'
          effectiveDate:
            $ref: './common.yml#/EffectiveDate'
          userId:
            $ref: './common.yml#/Uid2Write'
    putMemberAttributes:
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/AuthorizationAttributes'
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
    putMembersAttributes:
      type: array
      items:
        type: object
        properties:
          attributes:
            $ref: '#/components/schemas/AuthorizationAttributes'
          effectiveDate:
            $ref: './common.yml#/EffectiveDate'
          userId:
            $ref: './common.yml#/Uid2Write'
  schemas:
    AuthorizationAttribute:
      type: string
      enum:
        - contributer
        - channel manager
        - event manager
        - moderator
        - user manager
    AuthorizationAttributes:
      type: array
      description: "Authorization attributes may be one of the following values:

        - **channel creator** - Can create channels and edit or delete own channels.

        - **channel manager** - Can create, edit, and delete channels. Can set channel membership for any channel.
          Not a member of every channel nor authorized to do anything within a channel unless given additional
          authorization attributes within that channel, which the manager can give to themselves.

        - **event manager** - Coming soon

        - **moderator** - Can make posts as well as edit or delete any posts.

        - **user manager** - Can add or remove users and set authorization attributes to other users.
        "
      items:
        $ref: '#/components/schemas/AuthorizationAttribute'
    Unit:
      type: object
      required:
        - basic
      properties:
        basic:
          $ref: '#/components/schemas/UnitBasic'
        activityFeed:
          allOf:
            - $ref: '#/components/schemas/UnitActivityFeed'
            - type: object
              description: "All unit members have follower access to the activity
                feed channel. If marked as private then users who are not members
                of the unit cannot follow the unit's activity feed."
        channels:
          type: array
          description: Conversational channels that are part of the unit.
          items:
            $ref: './communications.yml#/components/schemas/ChannelBasic'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UnitMembers'
        units:
          type: array
          description: Items that are sub units of this unit.
          items:
            $ref: '#/components/schemas/UnitMicro'
    UnitActivityFeed:
      type: object
      description: Social media style posts.
      properties:
        channel:
          $ref: './communications.yml#/components/schemas/ChannelBasic'
        pins:
          type: array
          description: Pinned posts
          maxItems: 5
          items:
            $ref: './communications.yml#/components/schemas/PostTypes'
        posts:
          $ref: '#/components/schemas/UnitPosts'
    UnitBasic:
      type: object
      required:
        - name
        - meta
        - location
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        accessibility:
          $ref: './common.yml#/Accessibility'
        activityScore:
          $ref: './common.yml#/SocialScore'
        banner:
          $ref: './common.yml#/Image'
        contentQualityScore:
          $ref: './common.yml#/SocialScore'
        email:
          type: string
        freshnessScore:
          $ref: './common.yml#/SocialScore'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        logo:
          $ref: './common.yml#/Image'
        longDescription:
          type: string
        meta:
          $ref: '#/components/schemas/UnitMeta'
        name:
          type: string
        networks:
          description: Array of network ID's for the networks this unit is a part of.
          type: array
          items:
            type: string
        parentUnit:
          type: object
          nullable: true
          properties:
            uid:
              $ref: './common.yml#/Uid2Write'
            name:
              type: string
              readOnly: true
        phoneNumber:
          $ref: './common.yml#/PhoneNumber'
        qualityScore:
          $ref: './common.yml#/SocialScore'
        shortDescription:
          type: string
          maxLength: 500
        vanityUrlPath:
          type: string
        welcomeMessage:
          type: string
        website:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitMembers:
      allOf:
        - $ref: './users.yml#/components/schemas/UserMicro'
        - type: object
          properties:
            authorizationAttributes:
              type: array
              description: The authorization attributes that apply to this user for this unit within the unit's networks.
              items:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/AuthorizationAttribute'
                  inherited:
                    type: boolean
                    description: "If the authorization attribute comes from a parent unit then `true`, if it comes from this unit then `false`."
                  unitId:
                    type: string
                    description: The unit id where this attribute was assigned.
                  effectiveDate:
                    $ref: './common.yml#/EffectiveDate'
                  effectiveDateRanges:
                    $ref: './common.yml#/EffectiveDateRanges'
    UnitMeta:
      oneOf:
        - $ref: '#/components/schemas/UnitTypeRetailer'
        - $ref: '#/components/schemas/UnitTypeTeam'
        - $ref: '#/components/schemas/UnitTypeVenue'
      discriminator:
        propertyName: unitType
        mapping:
          retailer: '#/components/schemas/UnitTypeRetailer'
          team: '#/components/schemas/UnitTypeTeam'
          venue: '#/components/schemas/UnitTypeVenue'
    UnitMicro:
      type: object
      properties:
        uid:
          $ref: './common.yml#/Uid2Write'
        name:
          type: string
          description: The name of the unit.
          readOnly: true
    UnitPosts:
      type: array
      description: All types of posts
      maxItems: 50
      items:
        $ref: './communications.yml#/components/schemas/PostTypes'
    UnitTypeEnumValues:
      - retailer
      - team
      - venue
    UnitTypeRetailer:
      type: object
      required:
        - unitType
      properties:
        hasOnlineStore:
          type: boolean
        hasPhysicalStore:
          type: boolean
        unitType:
          type: string
          enum:
            - retailer
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitTypeTeam:
      type: object
      required:
        - unitType
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        networks:
          type: array
          items:
            type: string
        recruiting:
          type: boolean
        recruitingMessage:
          type: string
        recruitingMinimumAge:
          type: integer
          minimum: 0
        upcomingEvents:
          $ref: './events.yml#/components/schemas/UpcomingEvents'
        unitType:
          type: string
          enum:
            - team
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitTypeVenue:
      type: object
      required:
        - unitType
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        hoursOfOperation:
          $ref: './common.yml#/HoursOfOperationWeek'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        networks:
          type: array
          items:
            type: string
        rules:
          type: string
        types:
          description: Network specific venue types.
          type: array
          items:
            type: string
        upcomingEvents:
          $ref: './events.yml#/components/schemas/UpcomingEvents'
        unitType:
          type: string
          enum:
            - venue
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
