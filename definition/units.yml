paths:
  units:
    get:
      tags:
        - Units
      description: Get a list of units
      parameters:
        - $ref: './common.yml#/parameterQueryAccessibility'
        - name: networks
          description: The networks to limit returned units and fieldsets to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: freshnessScore
          description: Filter on freshness score range.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: qualityScore
          description: Score based on how setup a unit is.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: contentQualityScore
          description: Score based on the quality of the content created by the unit (articles, posts, comments, etc).
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: activityScore
          description: Score based on the frequency that a unit accesses the network.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
      responses:
        200:
          description: A list of units
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    post:
      tags:
        - Units
      description: Create a new unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: Unit created
          headers:
            Location:
              description: The API endpoint to hit to get the created unit.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  unit:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units
      description: Get a single unit and its details
      responses:
        200:
          description: Retrieved unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    put:
      tags:
        - Units
      description: Update a single unit's details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: Unit found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        404:
          description: Unit not found
    delete:
      tags:
        - Units
      description: Delete a unit
      responses:
        204:
          description: Unit deleted
  unitMembers:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Members
      description: Get a list of unit members
      responses:
        200:
          description: Users who are members of this unit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitMembers'
  unitMember:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - $ref: './users.yml#/components/parameters/pathUserId'
    put:
      tags:
        - Members
      description: Make a user a member of the unit
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: The unit authorization roles to apply to the user.
      responses:
        200:
          description: User added
        404:
          description: User or unit not found
    delete:
      tags:
        - Members
      description: Remove a user from the unit
      responses:
        204:
          description: User removed from unit
        404:
          description: User or unit not found
  unitAuthorizationRoles:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
      - $ref: './users.yml#/components/parameters/pathUserId'
    get:
      tags:
        - Roles
      description: Get the unit authorization roles and permissions
      responses:
        200:
          description: A list of unit's authorization roles and their permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationRole'
    put:
      tags:
        - Roles
      description: Set the unit authorization roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuthorizationRole'
      responses:
        200:
          description: A list of unit's authorization roles and their permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationRole'
components:
  parameters:
    pathUnitId:
      name: 'unitId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - members
            - roles
            - teams
            - venues
  schemas:
    Accessibility:
      type: string
      enum:
        - public
        - private
        - unlisted
        - closed
    AuthorizationRole:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum:
              - todo
    Unit:
      type: object
      properties:
        basic:
          $ref: '#/components/schemas/UnitBasic'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UnitMembers'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/UnitTeams'
        venues:
          type: array
          items:
            $ref: '#/components/schemas/UnitVenue'
    UnitBasic:
      type: object
      required:
        - name
        - location
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        name:
          type: string
        location:
          $ref: './locations.yml#/components/schemas/Location'
        networks:
          type: array
          items:
            type: string
        longDescription:
          type: string
        shortDescription:
          type: string
          maxLength: 500
        welcomeMessage:
          type: string
        logo:
          $ref: './common.yml#/Image'
        banner:
          $ref: './common.yml#/Image'
        accessibility:
          $ref: '#/components/schemas/Accessibility'
        vanityUrlPath:
          type: string
        email:
          type: string
        phoneNumber:
          $ref: './common.yml#/PhoneNumber'
        website:
          type: string
        activityScore:
          $ref: './common.yml#/SocialScore'
        freshnessScore:
          $ref: './common.yml#/SocialScore'
        qualityScore:
          $ref: './common.yml#/SocialScore'
        contentQualityScore:
          $ref: './common.yml#/SocialScore'
    UnitMembers:
      allOf:
        - $ref: './users.yml#/components/schemas/UserBasic'
        - type: object
          properties:
            authorizationRoles:
              type: array
              items:
                type: string
            memberRole:
              type: string
            memberRoleDescription:
              type: string
    UnitRetailers:
      type: object
      properties:
        hasOnlineStore:
          type: boolean
        hasPhysicalStore:
          type: boolean
    UnitTeams:
      type: object
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        networks:
          type: array
          items:
            type: string
        recruiting:
          type: boolean
        recruitingMessage:
          type: string
        recruitingMinimumAge:
          type: integer
          minimum: 0
        upcomingEvents:
          $ref: './events.yml#/components/schemas/Events'
    UnitVenue:
      type: object
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        hoursOfOperation:
          $ref: './common.yml#/HoursOfOperationWeek'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        networks:
          type: array
          items:
            type: string
        rules:
          type: string
        types:
          description: Network specific venue types.
          type: array
          items:
            type: string
        upcomingEvents:
          $ref: './events.yml#/components/schemas/Events'