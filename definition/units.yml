paths:
  units:
    get:
      tags:
        - Units
      description: Get a list of units
      parameters:
        - $ref: './common.yml#/parameterQueryAccessibility'
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFieldSet'
        - name: networks
          description: The networks to limit returned units to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: freshnessScore
          description: Filter on freshness score range.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: qualityScore
          description: Score based on how setup a unit is.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: contentQualityScore
          description: Score based on the quality of the content created by the unit (articles, posts, comments, etc).
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: activityScore
          description: Score based on the frequency that a unit accesses the network.
          in: query
          style: deepObject
          schema:
            $ref: './common.yml#/SocialScoreRange'
        - name: uid
          description: A comma seperated list of unit ids to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                $ref: '#/components/schemas/UnitTypeEnumValues'
        - name: unitType
          description: A comma seperated list of unit types to limit results to.
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                $ref: '#/components/schemas/UnitTypeEnumValues'
      responses:
        200:
          description: A list of units
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    post:
      tags:
        - Units
      summary: Create a new unit
      description: Create a new unit of a specified type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: Unit created
          headers:
            Location:
              description: The API endpoint to hit to get the created unit.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  basic:
                    $ref: '#/components/schemas/UnitBasic'
                  meta:
                    $ref: '#/components/schemas/UnitMeta'
  unit:
    parameters:
      - $ref: '#/components/parameters/pathUnitId'
    get:
      tags:
        - Units
      summary: Get a unit
      description: Get a single unit and its details
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
      responses:
        200:
          description: Retrieved unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    put:
      tags:
        - Units
      summary: Update a unit
      description: Update a single unit's basic info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: Unit found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        404:
          description: Unit not found
    patch:
      tags:
        - Units
      summary: Partial update a unit
      description: Update parts of a single unit's basic info
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: Unit updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    delete:
      tags:
        - Units
      summary: Delete a unit
      description: Delete all data about a unit and its sub units for all effective dates.
      responses:
        204:
          description: Unit deleted
components:
  parameters:
    pathUnitId:
      name: 'unitId'
      in: path
      required: true
      schema:
        type: string
    pathTeamId:
      name: 'teamId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - members
            - units
  schemas:
    Unit:
      type: object
      required:
        - basic
      properties:
        basic:
          $ref: '#/components/schemas/UnitBasic'
        members:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/UnitMembers'
        units:
          type: array
          readOnly: true
          description: Items that are sub units of this unit.
          items:
            $ref: '#/components/schemas/UnitMicro'
    UnitBasic:
      type: object
      required:
        - name
        - meta
        - location
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        accessibility:
          $ref: './common.yml#/Accessibility'
        activityScore:
          $ref: './common.yml#/SocialScore'
        banner:
          $ref: './common.yml#/Image'
        contentQualityScore:
          $ref: './common.yml#/SocialScore'
        email:
          type: string
        freshnessScore:
          $ref: './common.yml#/SocialScore'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        logo:
          $ref: './common.yml#/Image'
        longDescription:
          type: string
        meta:
          $ref: '#/components/schemas/UnitMeta'
        name:
          type: string
        networks:
          description: Array of network ID's for the networks this unit is a part of.
          type: array
          items:
            type: string
        parentUnit:
          type: object
          nullable: true
          properties:
            uid:
              $ref: './common.yml#/Uid2Write'
            name:
              type: string
              readOnly: true
        phoneNumber:
          $ref: './common.yml#/PhoneNumber'
        qualityScore:
          $ref: './common.yml#/SocialScore'
        shortDescription:
          type: string
          maxLength: 500
        vanityUrlPath:
          type: string
        welcomeMessage:
          type: string
        website:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitMembers:
      allOf:
        - $ref: './users.yml#/components/schemas/UserMicro'
        - type: object
          properties:
            authorizationAttributes:
              type: array
              description: The authorization attributes that apply to this user for this unit within the unit's networks.
              items:
                type: object
                properties:
                  uid:
                    $ref: './common.yml#/Uid2'
                  name:
                    type: string
                    description: The attribute name.
                  effectiveDate:
                    $ref: './common.yml#/EffectiveDate'
                  effectiveDateRanges:
                    $ref: './common.yml#/EffectiveDateRanges'
    UnitMeta:
      oneOf:
        - $ref: '#/components/schemas/UnitTypeRetailer'
        - $ref: '#/components/schemas/UnitTypeTeam'
        - $ref: '#/components/schemas/UnitTypeVenue'
      discriminator:
        propertyName: unitType
        mapping:
          retailer: '#/components/schemas/UnitTypeRetailer'
          team: '#/components/schemas/UnitTypeTeam'
          venue: '#/components/schemas/UnitTypeVenue'
    UnitMicro:
      type: object
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        name:
          description: The name of the unit.
          type: string
    UnitPost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitTypeEnumValues:
      - retailer
      - team
      - venue
    UnitTypeRetailer:
      type: object
      required:
        - unitType
      properties:
        hasOnlineStore:
          type: boolean
        hasPhysicalStore:
          type: boolean
        unitType:
          type: string
          enum:
            - retailer
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitTypeTeam:
      type: object
      required:
        - unitType
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        networks:
          type: array
          items:
            type: string
        recruiting:
          type: boolean
        recruitingMessage:
          type: string
        recruitingMinimumAge:
          type: integer
          minimum: 0
        upcomingEvents:
          $ref: './events.yml#/components/schemas/UpcomingEvents'
        unitType:
          type: string
          enum:
            - team
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
    UnitTypeVenue:
      type: object
      required:
        - unitType
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        hoursOfOperation:
          $ref: './common.yml#/HoursOfOperationWeek'
        location:
          $ref: './locations.yml#/components/schemas/Location'
        networks:
          type: array
          items:
            type: string
        rules:
          type: string
        types:
          description: Network specific venue types.
          type: array
          items:
            type: string
        upcomingEvents:
          $ref: './events.yml#/components/schemas/UpcomingEvents'
        unitType:
          type: string
          enum:
            - venue
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'