paths:
  portfolios:
    get:
      tags:
        - Portfolios
      summary: Get a list of portfolios
      description: Get a list of the portfolios that you have access to.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFieldSet'
        - name: portfolio
          in: query
          description: Specify one or more portfolio id's to limit results to.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: A list of portfolios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'
    post:
      tags:
        - Portfolios
      summary: Create a portfolio
      description: Create a portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioBasicWrite'
      responses:
        201:
          description: Portfolio created.
          headers:
            Location:
              description: The API endpoint to hit to get the created portfolio.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
  portfolio:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
    get:
      tags:
        - Portfolios
      summary: Get a single portfolio
      description: Get a single portfolio.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    put:
      tags:
        - Portfolios
      summary: Set basic info
      description: Set basic information for a portfolio.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioBasicWrite'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    patch:
      tags:
        - Portfolios
      summary: Partial update a portfolio
      description: Update part of the basic information for a portfolio.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioBasicWrite'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
    delete:
      tags:
        - Portfolios
      summary: Delete a portfolio
      description: Delete a portfolio, detach child portfolios, unassign members, and delete units.
      responses:
        204:
          description: Portfolio deleted
  childPortfolio:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
      - in: path
        name: childPortfolioId
        required: true
        schema:
          type: string
      - $ref: './common.yml#/parameterQueryEffectiveDateSetter'
    put:
      tags:
        - Child Portfolios
      summary: Attach a child portfolio
      description: Attach an existing portfolio as a child portfolio. If the portfolio is already attached to a different parent then it will be removed from the existing parent.
      responses:
        200:
          description: Attached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
    delete:
      tags:
        - Child Portfolios
      summary: Detatch a child portfolio
      description: Detatch an existing child portfolio from the parent. This will not delete the child portfolio.
      responses:
        200:
          description: Detached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
  portfolioMembers:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
    get:
      tags:
        - Members
      summary: Get members
      description: Get all portfolio members.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
        - $ref: '#/components/parameters/queryFilterUserId'
      responses:
        200:
          description: A list of portfolio members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioMember'
    put:
      tags:
        - Members
      summary: Batch assign attributes
      description: Attach one or more members to a portfolio with the specified attributes. If a member is attached without attributes then they will have basic read access.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/putMembersAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioMember'
    patch:
      tags:
        - Members
      summary: Batch partial assign attributes
      description: Partial update some attributes for one or more members.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/patchMembersAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioMember'
    delete:
      tags:
        - Members
      summary: Batch remove members
      description: Remove one or more members from the portfolio.
      parameters:
        - $ref: '#/components/parameters/queryFilterUserId'
      responses:
        204:
          description: Members removed
  portfolioMember:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      tags:
        - Members
      summary: Assign a member attributes
      description: Attach a members to a portfolio with the specified attributes. If a member is attached without attributes then they will have basic read access.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/requestBodies/putMemberAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioMember'
    patch:
      tags:
        - Members
      summary: Partial assign a member attributes
      description: Update some attributes for existing members or potentially add a member with set attributes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/patchMemberAttributes'
      responses:
        200:
          description: Membership attributes set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioMember'
    delete:
      tags:
        - Members
      summary: Remove a member
      description: Remove a members from the portfolio.
      responses:
        204:
          description: Members removed
components:
  parameters:
    pathPortfolioId:
      name: 'portfolioId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - members
            - portfolios
            - units
    queryFilterUserId:
      name: userId
      in: query
      style: form
      explode: false
      description: Comma separated list of user IDs.
      schema:
        type: array
        items:
          $ref: './common.yml#/Uid2'
  requestBodies:
    patchMemberAttributes:
      type: object
      properties:
        set:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioAttribute'
        remove:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioAttribute'
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
    patchMembersAttributes:
      type: array
      items:
        type: object
        properties:
          set:
            type: array
            items:
              $ref: '#/components/schemas/PortfolioAttribute'
          remove:
            type: array
            items:
              $ref: '#/components/schemas/PortfolioAttribute'
          effectiveDate:
            $ref: './common.yml#/EffectiveDate'
          userId:
            $ref: './common.yml#/Uid2Write'
    putMemberAttributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioAttribute'
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
    putMembersAttributes:
      type: array
      items:
        type: object
        properties:
          attributes:
            type: array
            items:
              $ref: '#/components/schemas/PortfolioAttribute'
          effectiveDate:
            $ref: './common.yml#/EffectiveDate'
          userId:
            $ref: './common.yml#/Uid2Write'
  schemas:
    Portfolio:
      type: object
      properties:
        authorizationAttributes:
          $ref: '#/components/schemas/PortfolioAttributes'
        basic:
          $ref: '#/components/schemas/PortfolioBasic'
        members:
          type: array
          description: A list of members attached to this portfolio.
          items:
            $ref: '#/components/schemas/PortfolioMember'
        portfolios:
          type: array
          description: A list of portfolios attached to this portfolio.
          items:
            $ref: '#/components/schemas/PortfolioMicro'
        units:
          type: array
          description: A list units that are attached to this portfolio.
          items:
            $ref: './units.yml#/components/schemas/UnitMicro'
    PortfolioAttribute:
      type: string
      description: "Authorization attributes may be one of the following values:

        - **contributer** - Can make posts as well as edit and delete own posts.

        - **channel manager** - Coming soon

        - **event manager** - Coming soon

        - **moderator** - Can make posts as well as edit or delete any posts.

        - **user manager** - Can add or remove users and set authorization attributes to other users.
        "
      enum:
        - contributer
        - channel manager
        - event manager
        - moderator
        - user manager
    PortfolioAttributes:
      type: object
      description: The authorization attributes for a single effective date.
      properties:
        contributers:
          description: Users who are able to make posts and edit or delete their own posts.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        eventOrganizer:
          description: Users who are able to create, edit, and delete events.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        moderator:
          description: Users who are able to edit or delete other user's posts.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        userManager:
          description: User's who have access to manage what authorization attributes other users have.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
    PortfolioBasic:
      type: object
      required:
        - name
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        name:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
        networks:
          type: array
          description: An array of networks that this portfolio is associated with.
          items:
            $ref: './networks.yml#/components/schemas/NetworkMicro'
        parentPortfolio:
          allOf:
            - $ref: '#/components/schemas/PortfolioMicro'
            - type: object
              properties:
                effectiveDate:
                  $ref: './common.yml#/EffectiveDate'
                effectiveDateRanges:
                  $ref: './common.yml#/EffectiveDateRanges'
    PortfolioBasicWrite:
      type: object
      properties:
        name:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        parentPortfolio:
          $ref: './common.yml#/Uid2Write'
    PortfolioMember:
      allOf:
        - $ref: './users.yml#/components/schemas/UserMicro'
        - type: object
          properties:
            authorizationAttributes:
              type: array
              items:
                $ref: './users.yml#/components/schemas/UserPortfolioAttribute'
    PortfolioMicro:
      type: object
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        name:
          type: string

