paths:
  portfolios:
    get:
      tags:
        - Portfolios
      summary: Get a list of portfolios
      description: Get a list of the portfolios that you have access to.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: A list of portfolios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'
    post:
      tags:
        - Portfolios
      summary: Create a portfolio
      description: Create a portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioBasic'
      responses:
        201:
          description: Portfolio created.
          headers:
            Location:
              description: The API endpoint to hit to get the created portfolio.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
  portfolio:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
    get:
      tags:
        - Portfolios
      summary: Get a single portfolio
      description: Get a single portfolio.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: '#/components/parameters/queryFieldSet'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    put:
      tags:
        - Portfolios
      summary: Set basic info
      description: Set basic information for a portfolio.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioBasic'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    patch:
      tags:
        - Portfolios
      summary: Partial update a portfolio
      description: Update part of the basic information for a portfolio.
      parameters:
        - $ref: './common.yml#/parameterEffectiveDate'
        - $ref: './common.yml#/parameterEffectiveDateRange'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
      responses:
        200:
          description: A portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    delete:
      tags:
        - Portfolios
      summary: Delete a portfolio
      description: Delete a portfolio and its sub portfolios for all effective dates
      responses:
        204:
          description: Portfolio deleted
  childPortfolios:
    parameters:
      - $ref: '#/components/parameters/pathPortfolioId'
      - in: path
        name: childPortfolioId
        required: true
        schema:
          type: string
    put:
      tags:
        - Child Portfolios
      summary: Attach a child portfolio
      description: Attach an existing portfolio as a child portfolio. If the portfolio is already attached to a different parent then it will be removed from the existing parent.
      responses:
        200:
          description: Attached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'
    delete:
      tags:
        - Child Portfolios
      summary: Detatch a child portfolio
      description: Detatch an existing child portfolio from the parent. This will not delete the child portfolio.
      responses:
        200:
          description: Detached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioBasic'

components:
  parameters:
    pathPortfolioId:
      name: 'portfolioId'
      in: path
      required: true
      schema:
        type: string
    queryFieldSet:
      name: fieldsets
      description: Specify which fieldsets to return.
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: ['basic']
        minItems: 1
        items:
          type: string
          enum:
            - basic
            - members
            - portfolios
            - units
  schemas:
    Portfolio:
      type: object
      properties:
        authorizationAttributes:
          $ref: '#/components/schemas/PortfolioAttributes'
        basic:
          $ref: '#/components/schemas/PortfolioBasic'
        members:
          type: array
          description: A list of up to 100 members. Use the portfolio members service to get other members.
          items:
            allOf:
              - $ref: './users.yml#/components/schemas/UserMicro'
              - type: object
                properties:
                  authorizationAttributes:
                    type: array
                    items:
                      type: object
                      properties:
                        attribute:
                          type: string
                          description: The name of an attribute from the network meta.
                        effectiveDate:
                          $ref: './common.yml#/EffectiveDate'
                        effectiveDateRanges:
                          $ref: './common.yml#/EffectiveDateRanges'
        portfolios:
          type: array
          description: Child portfolios.
          items:
            $ref: '#/components/schemas/PortfolioBasic'
        units:
          type: array
          description: A list of up to 100 units. Use the portfolio units service to get other units.
          items:
            $ref: './units.yml#/components/schemas/UnitBasic'
    PortfolioAttributes:
      type: object
      description: The authorization attributes for a single effective date.
      properties:
        contributers:
          description: Users who are able to make posts and edit or delete their own posts.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        eventOrganizer:
          description: Users who are able to create, edit, and delete events.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        moderator:
          description: Users who are able to edit or delete other user's posts.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
        userManager:
          description: User's who have access to manage what authorization attributes other users have.
          type: array
          items:
            $ref: './users.yml#/components/schemas/UserMicro'
    PortfolioBasic:
      type: object
      required:
        - name
      properties:
        uid:
          $ref: './common.yml#/Uid2'
        name:
          type: string
        effectiveDate:
          $ref: './common.yml#/EffectiveDate'
        effectiveDateRanges:
          $ref: './common.yml#/EffectiveDateRanges'
        members:
          type: array
          description: A list of users that are associated with this portfolio.
          items:
            allOf:
              - $ref: './users.yml#/components/schemas/UserMicro'
              - type: object
                properties:
                  authorizationAttributes:
                    type: array
                    items:
                      type: string
                      enum:
                        - contributer
                        - event organizer
                        - moderator
                        - user manager
        portfolios:
          type: array
          description: A list of portfolios that are associated with this portfolio.
          items:
            type: object
            required:
              - name
            properties:
              uid:
                $ref: './common.yml#/Uid2'
              name:
                type: string
        units:
          type: array
          description: A list of units that are associated with this portfolio.
          items:
            type: object
            properties:
              uid:
                $ref: './common.yml#/Uid2'
              name:
                $ref: './units.yml#/components/schemas/UnitBasic/properties/name'
              shortDescription:
                $ref: './units.yml#/components/schemas/UnitBasic/properties/shortDescription'


