{
  "openapi": "3.0.2",
  "info": {
    "title": "KAOS",
    "description": "For additional general information on how to use this API please refer to the [additional documentation](./docs.html).",
    "version": "0.0.1"
  },
  "x-tagGroups": [
    {
      "name": "Network Management",
      "tags": [
        "Networks",
        "Network Authorizations",
        "Network Venues"
      ]
    },
    {
      "name": "User Management",
      "tags": [
        "Users",
        "User Personal",
        "User Portfolios"
      ]
    },
    {
      "name": "Unit Management",
      "tags": [
        "Locations",
        "Units"
      ]
    }
  ],
  "paths": {
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "Get a list of all locations.",
        "responses": {
          "200": {
            "description": "All locations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UnitTypeVenue/properties/location"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "units": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "uid": {
                                  "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                                },
                                "name": {
                                  "$ref": "#/paths/~1units/post/responses/201/content/application~1json/schema/properties/basic/properties/name"
                                },
                                "shortDescription": {
                                  "$ref": "#/paths/~1units/post/responses/201/content/application~1json/schema/properties/basic/properties/shortDescription"
                                },
                                "logo": {
                                  "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/avatar"
                                }
                              }
                            }
                          },
                          "users": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "uid": {
                                    "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                                  },
                                  "displayName": {
                                    "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/displayName"
                                  },
                                  "avatar": {
                                    "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/avatar"
                                  },
                                  "firstName": {
                                    "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema/properties/firstName"
                                  },
                                  "lastName": {
                                    "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema/properties/lastName"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}": {
      "parameters": [
        {
          "name": "locationId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "Get a specific location.",
        "responses": {
          "200": {
            "description": "A single location.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnitTypeVenue/properties/location"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "units": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1units/post/responses/201/content/application~1json/schema/properties/basic"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/units": {
      "parameters": [
        {
          "$ref": "#/paths/~1locations~1%7BlocationId%7D/parameters/0"
        }
      ],
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "Get the units at a specific location.",
        "responses": {
          "200": {
            "description": "A single location and its units.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "location": {
                      "$ref": "#/components/schemas/UnitTypeVenue/properties/location"
                    },
                    "units": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks": {
      "get": {
        "tags": [
          "Networks"
        ],
        "description": "Get a list of networks.",
        "parameters": [
          {
            "$ref": "#/paths/~1networks~1%7BnetworkId%7D/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of networks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1networks~1%7BnetworkId%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Networks"
        ],
        "description": "Create a network.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "accessibility": {
                    "$ref": "#/paths/~1units/get/parameters/0/schema/allOf/0"
                  },
                  "name": {
                    "type": "string"
                  },
                  "shortDescription": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "description": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                  },
                  "effectiveDateRanges": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                  },
                  "uid": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Network created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}": {
      "parameters": [
        {
          "name": "networkId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "fieldsets",
          "description": "Specify which fieldsets to return.",
          "in": "query",
          "style": "form",
          "explode": false,
          "schema": {
            "type": "array",
            "default": [
              "basic"
            ],
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "basic",
                "venueTypes"
              ]
            }
          }
        }
      ],
      "get": {
        "tags": [
          "Networks"
        ],
        "description": "Get a single network.",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "A single network.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "basic": {
                      "$ref": "#/paths/~1networks/post/requestBody/content/application~1json/schema"
                    },
                    "venuTypes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Networks"
        ],
        "description": "Update a network.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1networks/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Network updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1networks~1%7BnetworkId%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}/venues": {
      "parameters": [
        {
          "$ref": "#/paths/~1networks~1%7BnetworkId%7D/parameters/0"
        }
      ],
      "get": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Get a list of venues",
        "description": "Get a single network's venue type information.",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/2"
          },
          {
            "name": "venueId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single network's venue type information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Create a venu",
        "description": "Update a single venue's information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "shortDescription"
                ],
                "properties": {
                  "uid": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                  },
                  "type": {
                    "type": "string"
                  },
                  "shortDescription": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "description": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                  },
                  "effectiveDateRanges": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Venue created.",
            "headers": {
              "Location": {
                "description": "The API endpoint to hit to get the created venue.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}/venues/{venueId}": {
      "parameters": [
        {
          "$ref": "#/paths/~1networks~1%7BnetworkId%7D/parameters/0"
        },
        {
          "name": "venueId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Get a venue",
        "description": "Get the venue metadata for a single venue within a network.",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "Venue retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Update a venu",
        "description": "Update a single venue's information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Venue updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Partial update a venu",
        "description": "Update parts of a venue for one or more effective dates.",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Venue updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1networks~1%7BnetworkId%7D~1venues/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Network Venues"
        ],
        "summary": "Delete a venue",
        "description": "Delete a single venue's information for all effective dates.",
        "responses": {
          "204": {
            "description": "Venue deleted."
          }
        }
      }
    },
    "/units": {
      "get": {
        "tags": [
          "Units"
        ],
        "description": "Get a list of units",
        "parameters": [
          {
            "$ref": "#/paths/~1users/get/parameters/4"
          },
          {
            "name": "effectiveDate",
            "description": "The date and time to use as the effective date identifier. Defaults to the current date and time.  See the [effectiveDate docs](./docs.html) for more information.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "effectiveDateRange",
            "description": "The start date-time and end date-time to use for the effective date identifier. Specifying this parameter will overwrite the effectiveDate query parameter. See the [effectiveDate docs](./docs.html) for more information.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "required": [
                "start",
                "end"
              ],
              "properties": {
                "start": {
                  "type": "string",
                  "format": "date-time"
                },
                "end": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "name": "fieldsets",
            "description": "Specify which fieldsets to return.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "default": [
                "basic"
              ],
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "basic",
                  "members",
                  "units"
                ]
              }
            }
          },
          {
            "name": "networks",
            "description": "The networks to limit returned units to.",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "freshnessScore",
            "description": "Filter on freshness score range.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "qualityScore",
            "description": "Score based on how setup a unit is.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "contentQualityScore",
            "description": "Score based on the quality of the content created by the unit (articles, posts, comments, etc).",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "activityScore",
            "description": "Score based on the frequency that a unit accesses the network.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "uid",
            "description": "A comma seperated list of unit ids to limit results to.",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "retailer",
                  "team",
                  "venue"
                ]
              }
            }
          },
          {
            "name": "unitType",
            "description": "A comma seperated list of unit types to limit results to.",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": {
                  "$ref": "#/paths/~1units/get/parameters/9/schema/items/enum"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of units",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Units"
        ],
        "summary": "Create a new unit",
        "description": "Create a new unit of a specified type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "basic"
                ],
                "properties": {
                  "basic": {
                    "$ref": "#/paths/~1units/post/responses/201/content/application~1json/schema/properties/basic"
                  },
                  "members": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "uid": {
                              "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                            },
                            "avatar": {
                              "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/avatar"
                            },
                            "displayName": {
                              "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/displayName"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "authorizationAttributes": {
                              "type": "array",
                              "description": "The authorization attributes that apply to this user for this unit within the unit's networks.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "uid": {
                                    "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The attribute name."
                                  },
                                  "effectiveDate": {
                                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                                  },
                                  "effectiveDateRanges": {
                                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "units": {
                    "type": "array",
                    "readOnly": true,
                    "description": "Items that are sub units of this unit.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "uid": {
                          "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                        },
                        "name": {
                          "description": "The name of the unit.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unit created",
            "headers": {
              "Location": {
                "description": "The API endpoint to hit to get the created unit.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "basic": {
                      "type": "object",
                      "required": [
                        "name",
                        "meta",
                        "location"
                      ],
                      "properties": {
                        "uid": {
                          "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                        },
                        "accessibility": {
                          "$ref": "#/paths/~1units/get/parameters/0/schema/allOf/0"
                        },
                        "activityScore": {
                          "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                        },
                        "banner": {
                          "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/avatar"
                        },
                        "contentQualityScore": {
                          "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                        },
                        "email": {
                          "type": "string"
                        },
                        "freshnessScore": {
                          "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                        },
                        "location": {
                          "$ref": "#/components/schemas/UnitTypeVenue/properties/location"
                        },
                        "logo": {
                          "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema/properties/avatar"
                        },
                        "longDescription": {
                          "type": "string"
                        },
                        "meta": {
                          "$ref": "#/paths/~1units/post/responses/201/content/application~1json/schema/properties/meta"
                        },
                        "name": {
                          "type": "string"
                        },
                        "networks": {
                          "description": "Array of network ID's for the networks this unit is a part of.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "parentUnit": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "uid": {
                              "description": "Unique identifier (UUID v1, date-time and MAC address)",
                              "type": "string"
                            },
                            "name": {
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "phoneNumber": {
                          "type": "string",
                          "pattern": "^\\+\\d+ \\d{3}-\\d{3}-\\d{4}$"
                        },
                        "qualityScore": {
                          "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                        },
                        "shortDescription": {
                          "type": "string",
                          "maxLength": 500
                        },
                        "vanityUrlPath": {
                          "type": "string"
                        },
                        "welcomeMessage": {
                          "type": "string"
                        },
                        "website": {
                          "type": "string"
                        },
                        "effectiveDate": {
                          "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                        },
                        "effectiveDateRanges": {
                          "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                        }
                      }
                    },
                    "meta": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnitTypeRetailer"
                        },
                        {
                          "$ref": "#/components/schemas/UnitTypeTeam"
                        },
                        {
                          "$ref": "#/components/schemas/UnitTypeVenue"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "unitType",
                        "mapping": {
                          "retailer": "#/components/schemas/UnitTypeRetailer",
                          "team": "#/components/schemas/UnitTypeTeam",
                          "venue": "#/components/schemas/UnitTypeVenue"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/units/{unitId}": {
      "parameters": [
        {
          "name": "unitId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Units"
        ],
        "summary": "Get a unit",
        "description": "Get a single unit and its details",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved unit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Units"
        ],
        "summary": "Update a unit",
        "description": "Update a single unit's basic info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unit found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "404": {
            "description": "Unit not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Units"
        ],
        "summary": "Partial update a unit",
        "description": "Update parts of a single unit's basic info",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unit updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Units"
        ],
        "summary": "Delete a unit",
        "description": "Delete all data about a unit and its sub units for all effective dates.",
        "responses": {
          "204": {
            "description": "Unit deleted"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get a list of users",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1units/get/parameters/2"
          },
          {
            "name": "fieldsets",
            "description": "Specify which fieldsets to return.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "default": [
                "basic"
              ],
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "basic",
                  "personal",
                  "portfolio"
                ]
              }
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter results to the specific user ids.",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibility",
            "description": "Filter based on accessibility",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "discoverable": {
                      "type": "boolean"
                    },
                    "public": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": "object",
                  "default": {
                    "discoverable": true,
                    "public": true
                  }
                }
              ]
            }
          },
          {
            "name": "freshnessScore",
            "description": "Filter on freshness score range.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "qualityScore",
            "description": "Filter on quality score range.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "$ref": "#/paths/~1users/get/parameters/7/schema"
            }
          },
          {
            "name": "contentQualityScore",
            "description": "Filter on content quality score range.",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "minimum": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "readOnly": true
                },
                "maximum": {
                  "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "basic": {
                      "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema"
                    },
                    "personal": {
                      "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema"
                    },
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1users~1%7BuserId%7D~1portfolios/get/responses/200/content/application~1json/schema/items"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Basic fieldset data",
                "required": [
                  "displayName"
                ],
                "properties": {
                  "uid": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                  },
                  "accessibility": {
                    "$ref": "#/paths/~1units/get/parameters/0/schema/allOf/0"
                  },
                  "avatar": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    }
                  },
                  "displayName": {
                    "description": "The publicly displayed name for this user.",
                    "type": "string"
                  },
                  "effectiveDate": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                  },
                  "effectiveDateRanges": {
                    "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                  },
                  "shortDescription": {
                    "description": "A short description that a user can add for themself.",
                    "type": "string",
                    "maxLength": 500
                  },
                  "longDescription": {
                    "description": "A longer description that a user can add for themself.",
                    "type": "string"
                  },
                  "networks": {
                    "description": "The networks that the user currently has an account with.",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "vanityUrlPath": {
                    "description": "The URL to the user's own page within the networks.",
                    "type": "string"
                  },
                  "website": {
                    "description": "A URL to the user's own external website.",
                    "type": "string"
                  },
                  "freshnessScore": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                      },
                      {
                        "type": "integer",
                        "description": "How active the user is, how often the log in, how often they interact."
                      }
                    ]
                  },
                  "qualityScore": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                      },
                      {
                        "type": "integer",
                        "description": "Quality of a user's identifying data. The more information the unit has filled out (phone, address, logo, about, etc) the higher the quality."
                      }
                    ]
                  },
                  "contentQualityScore": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1units/get/parameters/5/schema/properties/minimum"
                      },
                      {
                        "type": "integer",
                        "description": "Quality of a units content. Are their posts relevant? Do they have images, how many likes, how many comments. Have posts been reported as bad or inappropriate content."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unit created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "Get a single user and its details",
        "parameters": [
          {
            "$ref": "#/paths/~1units/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1users/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set a user's basic data",
        "description": "Update a single user's basic data.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1users/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user for all effective dates.",
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/users/{userId}/personal": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "User Personal"
        ],
        "summary": "Get user's personal info",
        "responses": {
          "200": {
            "description": "Retrieved user's personal info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Personal"
        ],
        "summary": "Set user's personal info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Personal fieldset data",
                "properties": {
                  "uid": {
                    "description": "Unique identifier (UUID v4)",
                    "type": "string"
                  },
                  "accessibility": {
                    "$ref": "#/paths/~1units/get/parameters/0/schema/allOf/0"
                  },
                  "birthdate": {
                    "type": "string",
                    "format": "date"
                  },
                  "birthdateVerified": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "nameVerified": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "emailVerified": {
                    "type": "boolean"
                  },
                  "location": {
                    "$ref": "#/components/schemas/UnitTypeVenue/properties/location"
                  },
                  "locationVerified": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set user's personal info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User Personal"
        ],
        "summary": "Partial update a user's personal info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set user's personal info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/put/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Personal"
        ],
        "summary": "Remove user's personal info",
        "responses": {
          "204": {
            "description": "Personal info removed"
          }
        }
      }
    },
    "/users/{userId}/portfolios": {
      "parameters": [
        {
          "$ref": "#/paths/~1users~1%7BuserId%7D~1personal/parameters/0"
        }
      ],
      "get": {
        "tags": [
          "User Portfolios"
        ],
        "summary": "Get user portfolios",
        "description": "Get user portfolio and authorization attributes.",
        "responses": {
          "200": {
            "description": "Retrieved user portfolios",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Authorization attributes may be one of the following values:\n- **contributer** - Can make posts as well as edit and delete own posts.\n- **channel manager** - Coming soon\n- **event manager** - Coming soon\n- **moderator** - Can make posts as well as edit or delete any posts.\n- **user manager** - Can add or remove users and set authorization attributes to other users. ",
                          "enum": [
                            "contributer",
                            "channel manager",
                            "event manager",
                            "moderator",
                            "user manager"
                          ]
                        }
                      },
                      "effectiveDate": {
                        "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
                      },
                      "effectiveDateRanges": {
                        "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
                      },
                      "portfolio": {
                        "type": "object",
                        "description": "The portfolio that granted this attribute.",
                        "properties": {
                          "uid": {
                            "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "units": {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1units/post/requestBody/content/application~1json/schema/properties/units/items"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UnitTypeRetailer": {
        "type": "object",
        "required": [
          "unitType"
        ],
        "properties": {
          "hasOnlineStore": {
            "type": "boolean"
          },
          "hasPhysicalStore": {
            "type": "boolean"
          },
          "unitType": {
            "type": "string",
            "enum": [
              "retailer"
            ]
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
          },
          "effectiveDateRanges": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
          }
        }
      },
      "UnitTypeTeam": {
        "type": "object",
        "required": [
          "unitType"
        ],
        "properties": {
          "uid": {
            "description": "Unique identifier (UUID v1, date-time and MAC address)",
            "type": "string",
            "readOnly": true
          },
          "networks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recruiting": {
            "type": "boolean"
          },
          "recruitingMessage": {
            "type": "string"
          },
          "recruitingMinimumAge": {
            "type": "integer",
            "minimum": 0
          },
          "upcomingEvents": {
            "type": "array",
            "maxItems": 4,
            "readOnly": true,
            "items": {
              "type": "object"
            }
          },
          "unitType": {
            "type": "string",
            "enum": [
              "team"
            ]
          },
          "effectiveDate": {
            "description": "The date and time range for which this information is effective.",
            "type": "object",
            "properties": {
              "start": {
                "description": "Defaults to the current date and time.",
                "type": "string",
                "format": "date-time"
              },
              "end": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "default": null
              }
            }
          },
          "effectiveDateRanges": {
            "description": "All effective date ranges that exist for this item.",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
            }
          }
        }
      },
      "UnitTypeVenue": {
        "type": "object",
        "required": [
          "unitType"
        ],
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
          },
          "hoursOfOperation": {
            "type": "object",
            "properties": {
              "sunday": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "open": {
                      "type": "string",
                      "description": "Stored as military time.",
                      "pattern": "^\\d{2}:\\d{2}$"
                    },
                    "close": {
                      "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday/items/properties/open"
                    }
                  }
                }
              },
              "monday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              },
              "tuesday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              },
              "wednesday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              },
              "thursday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              },
              "friday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              },
              "saturday": {
                "$ref": "#/components/schemas/UnitTypeVenue/properties/hoursOfOperation/properties/sunday"
              }
            }
          },
          "location": {
            "type": "object",
            "required": [
              "locationId",
              "latitude",
              "longitude"
            ],
            "properties": {
              "uid": {
                "$ref": "#/components/schemas/UnitTypeTeam/properties/uid"
              },
              "addressLine1": {
                "type": "string",
                "example": "1234 Mountain St"
              },
              "addressLine2": {
                "type": "string"
              },
              "addressLine4": {
                "type": "string"
              },
              "addressLine5": {
                "type": "string"
              },
              "country": {
                "type": "string",
                "example": "USA"
              },
              "displayName": {
                "type": "string"
              },
              "latitude": {
                "type": "number",
                "minimum": -90,
                "maximum": 90
              },
              "locality": {
                "type": "string",
                "example": "Provo"
              },
              "longitude": {
                "type": "number",
                "minimum": -180,
                "maximum": 180
              },
              "postalCode": {
                "type": "string",
                "example": "84606"
              },
              "province": {
                "type": "string",
                "example": "UT"
              }
            }
          },
          "networks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rules": {
            "type": "string"
          },
          "types": {
            "description": "Network specific venue types.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "upcomingEvents": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/upcomingEvents"
          },
          "unitType": {
            "type": "string",
            "enum": [
              "venue"
            ]
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDate"
          },
          "effectiveDateRanges": {
            "$ref": "#/components/schemas/UnitTypeTeam/properties/effectiveDateRanges"
          }
        }
      }
    }
  }
}